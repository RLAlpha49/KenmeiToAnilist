name: Beta Release (Auto)

on:
  push:
    branches:
      - master
    paths-ignore:
      - ".github/**"
      - "docs/**"
      - "*.md"

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NODE_ENV: production
      VITE_ANILIST_CLIENT_ID: ${{ secrets.ANILIST_CLIENT_ID }}
      VITE_ANILIST_CLIENT_SECRET: ${{ secrets.ANILIST_CLIENT_SECRET }}
      VITE_ANILIST_ENCRYPTION_KEY: ${{ secrets.ANILIST_ENCRYPTION_KEY }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        env:
          NPM_CONFIG_PRODUCTION: false
        run: npm ci --force
      - name: Build / Make (Windows)
        run: npm run make
      - name: Upload Windows Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            out/make/squirrel.windows/x64/*.exe
            out/make/squirrel.windows/x64/*.msi
          if-no-files-found: warn

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NODE_ENV: production
      VITE_ANILIST_CLIENT_ID: ${{ secrets.ANILIST_CLIENT_ID }}
      VITE_ANILIST_CLIENT_SECRET: ${{ secrets.ANILIST_CLIENT_SECRET }}
      VITE_ANILIST_ENCRYPTION_KEY: ${{ secrets.ANILIST_ENCRYPTION_KEY }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        env:
          NPM_CONFIG_PRODUCTION: false
        run: npm ci --force
      - name: Build / Make (macOS)
        run: npm run make
      - name: Upload macOS Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-installers
          path: |
            out/make/*.dmg
            out/make/zip/darwin/arm64/*.zip
          if-no-files-found: warn

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NODE_ENV: production
      VITE_ANILIST_CLIENT_ID: ${{ secrets.ANILIST_CLIENT_ID }}
      VITE_ANILIST_CLIENT_SECRET: ${{ secrets.ANILIST_CLIENT_SECRET }}
      VITE_ANILIST_ENCRYPTION_KEY: ${{ secrets.ANILIST_ENCRYPTION_KEY }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        env:
          NPM_CONFIG_PRODUCTION: false
        run: npm ci --force
      - name: Build / Make (Linux)
        run: npm run make
      - name: Upload Linux Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            out/make/deb/x64/*.deb
          if-no-files-found: warn

  publish-beta:
    name: Publish Beta Release
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NODE_ENV: production
      VITE_ANILIST_CLIENT_ID: ${{ secrets.ANILIST_CLIENT_ID }}
      VITE_ANILIST_CLIENT_SECRET: ${{ secrets.ANILIST_CLIENT_SECRET }}
      VITE_ANILIST_ENCRYPTION_KEY: ${{ secrets.ANILIST_ENCRYPTION_KEY }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Windows installers
        uses: actions/download-artifact@v4
        with:
          name: windows-installers
          path: out/make/squirrel.windows/x64

      - name: Download macOS installers
        uses: actions/download-artifact@v4
        with:
          name: macos-installers
          path: out/make

      - name: Download Linux installers
        uses: actions/download-artifact@v4
        with:
          name: linux-installers
          path: out/make/deb/x64

      - name: Get version from package.json
        id: version
        run: |
          $version = (Get-Content package.json | ConvertFrom-Json).version
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create or update beta release tag
        run: |
          $beta_tag = "v${{ steps.version.outputs.VERSION }}-beta"
          git tag -d "$beta_tag" 2>$null; $null
          git tag "$beta_tag"
          git push origin "$beta_tag" --force
        shell: pwsh

      - name: Create or update GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $beta_tag = "v${{ steps.version.outputs.VERSION }}-beta"

          # Check if release exists
          $release = gh release view "$beta_tag" 2>$null
          if ($LASTEXITCODE -eq 0) {
            # Delete existing release to create new one with updated artifacts
            gh release delete "$beta_tag" --yes
          }

          # Create new prerelease with all artifacts
          gh release create "$beta_tag" `
            --prerelease `
            --title "Beta Release v${{ steps.version.outputs.VERSION }}" `
            --notes "Automatic beta release" `
            out/make/squirrel.windows/x64/*.exe `
            out/make/squirrel.windows/x64/*.msi `
            out/make/*.dmg `
            out/make/zip/darwin/arm64/*.zip `
            out/make/deb/x64/*.deb
        shell: pwsh
